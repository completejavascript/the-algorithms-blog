webpackJsonp([21824135491790],{940:function(n,e){n.exports={data:{post:{html:'<p>Trước khi đọc bài này, xin mời các bạn tham khảo bài <a href="/the-algorithms-blog/tong-hop-mot-so-thuat-toan-co-ban-ve-sap-xep-phan-1">Tổng hợp một số thuật toán cơ bản về sắp xếp – Phần 1</a>. Bài này, mình sẽ giới thiệu với các bạn các thuật toán sắp xếp nhanh hơn, có thể giải quyết được những bài toán với số lượng phần tử lớn hơn.</p>\n<h2>Thuật toán sắp xếp nhanh – Quick Sort</h2>\n<p>Tư tưởng chính của thuật toán sắp xếp này là: chọn ra một phần tử làm trung gian, phần tử có giá trị nhỏ hơn trung gian thì cho sang bên trái phần tử trung gian, phần tử có giá trị lớn hơn trung gian thì cho sang bên phải phần tử trung gian.</p>\n<p><div id="gist91848233" class="gist">\n    <div class="gist-file">\n      <div class="gist-data">\n        <div class="js-gist-file-update-container js-task-list-container file-box">\n  <div id="file-quick_sort-cpp" class="file">\n    \n\n  <div itemprop="text" class="blob-wrapper data type-c">\n      <table class="highlight tab-size js-file-line-container" data-tab-size="8">\n      <tr>\n        <td id="file-quick_sort-cpp-L1" class="blob-num js-line-number" data-line-number="1"></td>\n        <td id="file-quick_sort-cpp-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">QuickSort</span>(<span class="pl-k">int</span> *a, <span class="pl-k">int</span> left, <span class="pl-k">int</span> right)</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L2" class="blob-num js-line-number" data-line-number="2"></td>\n        <td id="file-quick_sort-cpp-LC2" class="blob-code blob-code-inner js-file-line">{</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L3" class="blob-num js-line-number" data-line-number="3"></td>\n        <td id="file-quick_sort-cpp-LC3" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">int</span> l = left, r = right;</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L4" class="blob-num js-line-number" data-line-number="4"></td>\n        <td id="file-quick_sort-cpp-LC4" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">int</span> pivot = a[(l + r) / <span class="pl-c1">2</span>];</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L5" class="blob-num js-line-number" data-line-number="5"></td>\n        <td id="file-quick_sort-cpp-LC5" class="blob-code blob-code-inner js-file-line">\n</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L6" class="blob-num js-line-number" data-line-number="6"></td>\n        <td id="file-quick_sort-cpp-LC6" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span>(l &lt;= r)</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L7" class="blob-num js-line-number" data-line-number="7"></td>\n        <td id="file-quick_sort-cpp-LC7" class="blob-code blob-code-inner js-file-line">    {</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L8" class="blob-num js-line-number" data-line-number="8"></td>\n        <td id="file-quick_sort-cpp-LC8" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span>(a[l] &lt; pivot) l++;</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L9" class="blob-num js-line-number" data-line-number="9"></td>\n        <td id="file-quick_sort-cpp-LC9" class="blob-code blob-code-inner js-file-line">    </td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L10" class="blob-num js-line-number" data-line-number="10"></td>\n        <td id="file-quick_sort-cpp-LC10" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span>(a[r] &gt; pivot) r--;</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L11" class="blob-num js-line-number" data-line-number="11"></td>\n        <td id="file-quick_sort-cpp-LC11" class="blob-code blob-code-inner js-file-line">     </td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L12" class="blob-num js-line-number" data-line-number="12"></td>\n        <td id="file-quick_sort-cpp-LC12" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span>(l &lt;= r)</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L13" class="blob-num js-line-number" data-line-number="13"></td>\n        <td id="file-quick_sort-cpp-LC13" class="blob-code blob-code-inner js-file-line">        {</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L14" class="blob-num js-line-number" data-line-number="14"></td>\n        <td id="file-quick_sort-cpp-LC14" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">swap</span>(a[l], a[r]);</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L15" class="blob-num js-line-number" data-line-number="15"></td>\n        <td id="file-quick_sort-cpp-LC15" class="blob-code blob-code-inner js-file-line">            l++;</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L16" class="blob-num js-line-number" data-line-number="16"></td>\n        <td id="file-quick_sort-cpp-LC16" class="blob-code blob-code-inner js-file-line">            r--;</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L17" class="blob-num js-line-number" data-line-number="17"></td>\n        <td id="file-quick_sort-cpp-LC17" class="blob-code blob-code-inner js-file-line">        }</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L18" class="blob-num js-line-number" data-line-number="18"></td>\n        <td id="file-quick_sort-cpp-LC18" class="blob-code blob-code-inner js-file-line">    }</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L19" class="blob-num js-line-number" data-line-number="19"></td>\n        <td id="file-quick_sort-cpp-LC19" class="blob-code blob-code-inner js-file-line">     </td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L20" class="blob-num js-line-number" data-line-number="20"></td>\n        <td id="file-quick_sort-cpp-LC20" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(left &lt; r) </td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L21" class="blob-num js-line-number" data-line-number="21"></td>\n        <td id="file-quick_sort-cpp-LC21" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Quick</span>(a, left, r);</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L22" class="blob-num js-line-number" data-line-number="22"></td>\n        <td id="file-quick_sort-cpp-LC22" class="blob-code blob-code-inner js-file-line">     </td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L23" class="blob-num js-line-number" data-line-number="23"></td>\n        <td id="file-quick_sort-cpp-LC23" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(l &lt; right) </td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L24" class="blob-num js-line-number" data-line-number="24"></td>\n        <td id="file-quick_sort-cpp-LC24" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Quick</span>(a, l, right);</td>\n      </tr>\n      <tr>\n        <td id="file-quick_sort-cpp-L25" class="blob-num js-line-number" data-line-number="25"></td>\n        <td id="file-quick_sort-cpp-LC25" class="blob-code blob-code-inner js-file-line">}</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class="gist-meta">\n        <a href="https://gist.github.com/completejavascript/77bb42705b234ac1a0be7a08050ec302/raw/e596620c41fc917321125f03162ad77038288948/quick_sort.cpp" style="float:right">view raw</a>\n        <a href="https://gist.github.com/completejavascript/77bb42705b234ac1a0be7a08050ec302#file-quick_sort-cpp">quick_sort.cpp</a>\n        hosted with &#10084; by <a href="https://github.com">GitHub</a>\n      </div>\n    </div>\n</div>\n</p>\n<h2>Thuật toán sắp xếp trộn – Merge sort</h2>\n<p><div id="gist91848269" class="gist">\n    <div class="gist-file">\n      <div class="gist-data">\n        <div class="js-gist-file-update-container js-task-list-container file-box">\n  <div id="file-merge_sort-cpp" class="file">\n    \n\n  <div itemprop="text" class="blob-wrapper data type-c">\n      <table class="highlight tab-size js-file-line-container" data-tab-size="8">\n      <tr>\n        <td id="file-merge_sort-cpp-L1" class="blob-num js-line-number" data-line-number="1"></td>\n        <td id="file-merge_sort-cpp-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Hàm này dùng để trộn 2 phần đã được sắp xếp với nhau</span></td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L2" class="blob-num js-line-number" data-line-number="2"></td>\n        <td id="file-merge_sort-cpp-LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">Merge</span>(<span class="pl-k">int</span> *a, <span class="pl-k">int</span> left, <span class="pl-k">int</span> m, <span class="pl-k">int</span> right)</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L3" class="blob-num js-line-number" data-line-number="3"></td>\n        <td id="file-merge_sort-cpp-LC3" class="blob-code blob-code-inner js-file-line">{</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L4" class="blob-num js-line-number" data-line-number="4"></td>\n        <td id="file-merge_sort-cpp-LC4" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">int</span> l = left, r = m + <span class="pl-c1">1</span>, k = <span class="pl-c1">0</span>;</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L5" class="blob-num js-line-number" data-line-number="5"></td>\n        <td id="file-merge_sort-cpp-LC5" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">int</span> *tmp = <span class="pl-k">new</span> T[right - left + <span class="pl-c1">1</span>];</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L6" class="blob-num js-line-number" data-line-number="6"></td>\n        <td id="file-merge_sort-cpp-LC6" class="blob-code blob-code-inner js-file-line">     </td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L7" class="blob-num js-line-number" data-line-number="7"></td>\n        <td id="file-merge_sort-cpp-LC7" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span>(l &lt;= m &amp;&amp; r &lt;= right)</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L8" class="blob-num js-line-number" data-line-number="8"></td>\n        <td id="file-merge_sort-cpp-LC8" class="blob-code blob-code-inner js-file-line">    {</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L9" class="blob-num js-line-number" data-line-number="9"></td>\n        <td id="file-merge_sort-cpp-LC9" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span>(a[l] &lt; a[r]) tmp[k++] = a[l++];</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L10" class="blob-num js-line-number" data-line-number="10"></td>\n        <td id="file-merge_sort-cpp-LC10" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">else</span> tmp[k++] = a[r++];</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L11" class="blob-num js-line-number" data-line-number="11"></td>\n        <td id="file-merge_sort-cpp-LC11" class="blob-code blob-code-inner js-file-line">    }</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L12" class="blob-num js-line-number" data-line-number="12"></td>\n        <td id="file-merge_sort-cpp-LC12" class="blob-code blob-code-inner js-file-line">    </td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L13" class="blob-num js-line-number" data-line-number="13"></td>\n        <td id="file-merge_sort-cpp-LC13" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (l &lt;= m) tmp[k++] = a[l++];</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L14" class="blob-num js-line-number" data-line-number="14"></td>\n        <td id="file-merge_sort-cpp-LC14" class="blob-code blob-code-inner js-file-line">     </td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L15" class="blob-num js-line-number" data-line-number="15"></td>\n        <td id="file-merge_sort-cpp-LC15" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (r &lt;= right) tmp[k++] = a[r++];</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L16" class="blob-num js-line-number" data-line-number="16"></td>\n        <td id="file-merge_sort-cpp-LC16" class="blob-code blob-code-inner js-file-line">    </td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L17" class="blob-num js-line-number" data-line-number="17"></td>\n        <td id="file-merge_sort-cpp-LC17" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span>(<span class="pl-k">int</span> i = <span class="pl-c1">0</span>; i &lt; k; i++)</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L18" class="blob-num js-line-number" data-line-number="18"></td>\n        <td id="file-merge_sort-cpp-LC18" class="blob-code blob-code-inner js-file-line">        a[i+left] = tmp[i];</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L19" class="blob-num js-line-number" data-line-number="19"></td>\n        <td id="file-merge_sort-cpp-LC19" class="blob-code blob-code-inner js-file-line">     </td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L20" class="blob-num js-line-number" data-line-number="20"></td>\n        <td id="file-merge_sort-cpp-LC20" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">delete[]</span> tmp;</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L21" class="blob-num js-line-number" data-line-number="21"></td>\n        <td id="file-merge_sort-cpp-LC21" class="blob-code blob-code-inner js-file-line">}</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L22" class="blob-num js-line-number" data-line-number="22"></td>\n        <td id="file-merge_sort-cpp-LC22" class="blob-code blob-code-inner js-file-line">     </td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L23" class="blob-num js-line-number" data-line-number="23"></td>\n        <td id="file-merge_sort-cpp-LC23" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Chia dãy đã cho thành 2 phần cho đến đi không chia được nữa</span></td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L24" class="blob-num js-line-number" data-line-number="24"></td>\n        <td id="file-merge_sort-cpp-LC24" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Sau khi chia làm 2 phần, sắp xếp từng phần, rồi trộn lại với nhau</span></td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L25" class="blob-num js-line-number" data-line-number="25"></td>\n        <td id="file-merge_sort-cpp-LC25" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">MergeSort</span>(<span class="pl-k">int</span> *a, <span class="pl-k">int</span> left, <span class="pl-k">int</span> right)</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L26" class="blob-num js-line-number" data-line-number="26"></td>\n        <td id="file-merge_sort-cpp-LC26" class="blob-code blob-code-inner js-file-line">{</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L27" class="blob-num js-line-number" data-line-number="27"></td>\n        <td id="file-merge_sort-cpp-LC27" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">int</span> m;</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L28" class="blob-num js-line-number" data-line-number="28"></td>\n        <td id="file-merge_sort-cpp-LC28" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(left &lt; right)</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L29" class="blob-num js-line-number" data-line-number="29"></td>\n        <td id="file-merge_sort-cpp-LC29" class="blob-code blob-code-inner js-file-line">    {</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L30" class="blob-num js-line-number" data-line-number="30"></td>\n        <td id="file-merge_sort-cpp-LC30" class="blob-code blob-code-inner js-file-line">        m = (left + right) / <span class="pl-c1">2</span>;</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L31" class="blob-num js-line-number" data-line-number="31"></td>\n        <td id="file-merge_sort-cpp-LC31" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">MergeSort</span>(a, left, m);</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L32" class="blob-num js-line-number" data-line-number="32"></td>\n        <td id="file-merge_sort-cpp-LC32" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">MergeSort</span>(a, m + <span class="pl-c1">1</span>, right);</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L33" class="blob-num js-line-number" data-line-number="33"></td>\n        <td id="file-merge_sort-cpp-LC33" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Merge</span>(a, left, m, right);</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L34" class="blob-num js-line-number" data-line-number="34"></td>\n        <td id="file-merge_sort-cpp-LC34" class="blob-code blob-code-inner js-file-line">    }</td>\n      </tr>\n      <tr>\n        <td id="file-merge_sort-cpp-L35" class="blob-num js-line-number" data-line-number="35"></td>\n        <td id="file-merge_sort-cpp-LC35" class="blob-code blob-code-inner js-file-line">}</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class="gist-meta">\n        <a href="https://gist.github.com/completejavascript/f7c9bae36585cdb5735cc73e7f8eff5d/raw/9bc48da19994f5ad12d1a235c32a931ad23d5057/merge_sort.cpp" style="float:right">view raw</a>\n        <a href="https://gist.github.com/completejavascript/f7c9bae36585cdb5735cc73e7f8eff5d#file-merge_sort-cpp">merge_sort.cpp</a>\n        hosted with &#10084; by <a href="https://github.com">GitHub</a>\n      </div>\n    </div>\n</div>\n</p>\n<h2>Thuật toán sắp xếp vun đống – Heap sort</h2>\n<p>Thuật toán xếp vun đống và thuật toán sắp xếp trộn ở trên có độ phức tạp là N.Log(N) nên chạy rất nhanh. Với thuật toán này, các phần tử trong mảng được đặt ở vị trí mô tả cây nhị phân đầy đủ. Tức là nếu chỉ số các phần tử là 0, 1, 2,… thì tại phần tử thứ i sẽ có 2 nút con của nó là tại phần tử thứ 2<em>i + 1 và 2</em>i + 2.</p>\n<p><div id="gist91848282" class="gist">\n    <div class="gist-file">\n      <div class="gist-data">\n        <div class="js-gist-file-update-container js-task-list-container file-box">\n  <div id="file-heap_sort-cpp" class="file">\n    \n\n  <div itemprop="text" class="blob-wrapper data type-c">\n      <table class="highlight tab-size js-file-line-container" data-tab-size="8">\n      <tr>\n        <td id="file-heap_sort-cpp-L1" class="blob-num js-line-number" data-line-number="1"></td>\n        <td id="file-heap_sort-cpp-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Sắp xếp lại cây, sao cho phần tử cha luôn lớn hơn phần tử con của nó</span></td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L2" class="blob-num js-line-number" data-line-number="2"></td>\n        <td id="file-heap_sort-cpp-LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">Heapify</span>(<span class="pl-k">int</span> *a, <span class="pl-k">int</span> N, <span class="pl-k">int</span> i)</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L3" class="blob-num js-line-number" data-line-number="3"></td>\n        <td id="file-heap_sort-cpp-LC3" class="blob-code blob-code-inner js-file-line">{</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L4" class="blob-num js-line-number" data-line-number="4"></td>\n        <td id="file-heap_sort-cpp-LC4" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">int</span> Left = <span class="pl-c1">2</span>*i + <span class="pl-c1">1</span>, Right = <span class="pl-c1">2</span>*i + <span class="pl-c1">2</span>, Largest;</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L5" class="blob-num js-line-number" data-line-number="5"></td>\n        <td id="file-heap_sort-cpp-LC5" class="blob-code blob-code-inner js-file-line">\n</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L6" class="blob-num js-line-number" data-line-number="6"></td>\n        <td id="file-heap_sort-cpp-LC6" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(Left &lt; N &amp;&amp; a[Left] &gt; a[i]) Largest = Left;</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L7" class="blob-num js-line-number" data-line-number="7"></td>\n        <td id="file-heap_sort-cpp-LC7" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">else</span> Largest = i;</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L8" class="blob-num js-line-number" data-line-number="8"></td>\n        <td id="file-heap_sort-cpp-LC8" class="blob-code blob-code-inner js-file-line"> </td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L9" class="blob-num js-line-number" data-line-number="9"></td>\n        <td id="file-heap_sort-cpp-LC9" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(Right &lt; N &amp;&amp; a[Right] &gt; a[Largest]) Largest = Right;</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L10" class="blob-num js-line-number" data-line-number="10"></td>\n        <td id="file-heap_sort-cpp-LC10" class="blob-code blob-code-inner js-file-line"> </td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L11" class="blob-num js-line-number" data-line-number="11"></td>\n        <td id="file-heap_sort-cpp-LC11" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(Largest != i)</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L12" class="blob-num js-line-number" data-line-number="12"></td>\n        <td id="file-heap_sort-cpp-LC12" class="blob-code blob-code-inner js-file-line">    {</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L13" class="blob-num js-line-number" data-line-number="13"></td>\n        <td id="file-heap_sort-cpp-LC13" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">swap</span>(a[i], a[Largest]);</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L14" class="blob-num js-line-number" data-line-number="14"></td>\n        <td id="file-heap_sort-cpp-LC14" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Heapify</span>(a, N, Largest);</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L15" class="blob-num js-line-number" data-line-number="15"></td>\n        <td id="file-heap_sort-cpp-LC15" class="blob-code blob-code-inner js-file-line">    }</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L16" class="blob-num js-line-number" data-line-number="16"></td>\n        <td id="file-heap_sort-cpp-LC16" class="blob-code blob-code-inner js-file-line">}</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L17" class="blob-num js-line-number" data-line-number="17"></td>\n        <td id="file-heap_sort-cpp-LC17" class="blob-code blob-code-inner js-file-line">     </td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L18" class="blob-num js-line-number" data-line-number="18"></td>\n        <td id="file-heap_sort-cpp-LC18" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Xây dựng mô hình cây nhị phân sao cho phần tử cha luôn lớn hơn phần tử con</span></td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L19" class="blob-num js-line-number" data-line-number="19"></td>\n        <td id="file-heap_sort-cpp-LC19" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">BuildHeap</span>(<span class="pl-k">int</span> *a, <span class="pl-k">int</span> N)</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L20" class="blob-num js-line-number" data-line-number="20"></td>\n        <td id="file-heap_sort-cpp-LC20" class="blob-code blob-code-inner js-file-line">{</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L21" class="blob-num js-line-number" data-line-number="21"></td>\n        <td id="file-heap_sort-cpp-LC21" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span>(<span class="pl-k">int</span> i = N/<span class="pl-c1">2</span>-<span class="pl-c1">1</span>; i &gt;= <span class="pl-c1">0</span>; i--)</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L22" class="blob-num js-line-number" data-line-number="22"></td>\n        <td id="file-heap_sort-cpp-LC22" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Heapify</span>(a, N, i);</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L23" class="blob-num js-line-number" data-line-number="23"></td>\n        <td id="file-heap_sort-cpp-LC23" class="blob-code blob-code-inner js-file-line">}</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L24" class="blob-num js-line-number" data-line-number="24"></td>\n        <td id="file-heap_sort-cpp-LC24" class="blob-code blob-code-inner js-file-line">     </td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L25" class="blob-num js-line-number" data-line-number="25"></td>\n        <td id="file-heap_sort-cpp-LC25" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Hàm chính</span></td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L26" class="blob-num js-line-number" data-line-number="26"></td>\n        <td id="file-heap_sort-cpp-LC26" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">Heap</span>(<span class="pl-k">int</span> *a, <span class="pl-k">int</span> N)</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L27" class="blob-num js-line-number" data-line-number="27"></td>\n        <td id="file-heap_sort-cpp-LC27" class="blob-code blob-code-inner js-file-line">{</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L28" class="blob-num js-line-number" data-line-number="28"></td>\n        <td id="file-heap_sort-cpp-LC28" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">BuildHeap</span>(a, N);</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L29" class="blob-num js-line-number" data-line-number="29"></td>\n        <td id="file-heap_sort-cpp-LC29" class="blob-code blob-code-inner js-file-line">     </td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L30" class="blob-num js-line-number" data-line-number="30"></td>\n        <td id="file-heap_sort-cpp-LC30" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span>(<span class="pl-k">int</span> i = N - <span class="pl-c1">1</span>; i &gt;= <span class="pl-c1">0</span>; i--)</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L31" class="blob-num js-line-number" data-line-number="31"></td>\n        <td id="file-heap_sort-cpp-LC31" class="blob-code blob-code-inner js-file-line">    {</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L32" class="blob-num js-line-number" data-line-number="32"></td>\n        <td id="file-heap_sort-cpp-LC32" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> cho phần tử lớn nhất xuống dưới cùng,</span></td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L33" class="blob-num js-line-number" data-line-number="33"></td>\n        <td id="file-heap_sort-cpp-LC33" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> sau đó, cập nhật lại cây</span></td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L34" class="blob-num js-line-number" data-line-number="34"></td>\n        <td id="file-heap_sort-cpp-LC34" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">swap</span>(a[i], a[<span class="pl-c1">0</span>]);</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L35" class="blob-num js-line-number" data-line-number="35"></td>\n        <td id="file-heap_sort-cpp-LC35" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">Heapify</span>(a, i, <span class="pl-c1">0</span>);</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L36" class="blob-num js-line-number" data-line-number="36"></td>\n        <td id="file-heap_sort-cpp-LC36" class="blob-code blob-code-inner js-file-line">    }</td>\n      </tr>\n      <tr>\n        <td id="file-heap_sort-cpp-L37" class="blob-num js-line-number" data-line-number="37"></td>\n        <td id="file-heap_sort-cpp-LC37" class="blob-code blob-code-inner js-file-line">}</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class="gist-meta">\n        <a href="https://gist.github.com/completejavascript/c6e40ed49a811e7fcd7e7607df433e9a/raw/b349792877a2db605b99d310df2bcfee0b633428/heap_sort.cpp" style="float:right">view raw</a>\n        <a href="https://gist.github.com/completejavascript/c6e40ed49a811e7fcd7e7607df433e9a#file-heap_sort-cpp">heap_sort.cpp</a>\n        hosted with &#10084; by <a href="https://github.com">GitHub</a>\n      </div>\n    </div>\n</div>\n</p>\n<p>Code by Phạm Văn Lâm</p>',id:"F:/Github/the-algorithms-blog/src/posts/2016-09-23---tong-hop-mot-so-thuat-toan-co-ban-ve-sap-xep-phan-2/tong-hop-mot-so-thuat-toan-co-ban-ve-sap-xep-phan-2.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Tổng hợp một số thuật toán cơ bản về sắp xếp - Phần 2",date:"23/09/2016",categories:["Thuật toán cơ bản"],tags:["phạm văn lâm","sắp xếp","sorting","thuật toán cơ bản","thuật toán sắp xếp cơ bản"]},fields:{slug:"/tong-hop-mot-so-thuat-toan-co-ban-ve-sap-xep-phan-2/"},excerpt:"Trước khi đọc bài này, xin mời các bạn tham khảo bài  Tổng hợp một số thuật toán cơ bản về sắp xếp – Phần 1 . Bài này, mình sẽ giới thiệu…",timeToRead:6},prevPost:{frontmatter:{title:"Tổng hợp một số thuật toán cơ bản"},fields:{slug:"/tong-hop-mot-so-thuat-toan-co-ban/"}},nextPost:{frontmatter:{title:"Tổng hợp một số thuật toán cơ bản về sắp xếp - Phần 1"},fields:{slug:"/tong-hop-mot-so-thuat-toan-co-ban-ve-sap-xep-phan-1/"}},site:{siteMetadata:{title:"Algorithms Blog",siteUrl:"http://thuattoan.phamvanlam.com",twitterHandle:"@CmpltJavaScript",fbCommentId:"728566430818562"}}},pathContext:{slug:"/tong-hop-mot-so-thuat-toan-co-ban-ve-sap-xep-phan-2/",prevSlug:"/tong-hop-mot-so-thuat-toan-co-ban/",nextSlug:"/tong-hop-mot-so-thuat-toan-co-ban-ve-sap-xep-phan-1/"}}}});
//# sourceMappingURL=path---tong-hop-mot-so-thuat-toan-co-ban-ve-sap-xep-phan-2-f23fdf9fb0380d0e1393.js.map