webpackJsonp([0x92c37e850cf7],{856:function(t,n){t.exports={data:{post:{html:'<h2>Đề bài:</h2>\n<p>Chương trình của bạn là để sử dụng thuật toán vét cạn brute-force để tìm ra câu trả lời cho <em>Life, the Universe, and Everything.</em> Nói đúng hơn, hãy viết những số nhỏ từ đầu vào ra đầu ra. Quá trình dừng lại khi sau khi đọc được số 42.</p>\n<h3><strong>Đầu vào:</strong></h3>\n<p>Tất cả những số đầu vào là những số nguyên có 1 hoặc 2 chữ số.</p>\n<h3>Đầu ra:</h3>\n<p>In ra những số mà trước khi gặp số 42 ở đầu vào.</p>\n<h3>Ví dụ:</h3>\n<p><strong>Đầu vào:</strong></p>\n<pre><code>1\n2\n88\n42\n99\n</code></pre>\n<p><strong>Đầu ra:</strong></p>\n<pre><code>1\n2\n88\n</code></pre>\n<p><em>Các bạn có thể tham khảo link gốc đề bài và submit code tại đây: <a href="http://www.spoj.com/problems/TEST/"> http://www.spoj.com/problems/TEST/</a></em></p>\n<h3>Phân tích:</h3>\n<ul>\n<li>Bài toán này chỉ là một bài toán đơn giản, có thể xếp loại vào dạng sử dụng <a href="/the-algorithms-blog/category/tham-lam-greedy/">thuật toán tham lam Greedy</a></li>\n</ul>\n<h2>Lời giải:</h2>\n<p>(Các bạn nên tự mình nghĩ ra thuật toán của bài toán trước khi tham khảo code của tôi nhé. Hãy phát huy tối đa khả năng sáng tạo của bản thân. Hơn nữa code tôi viết ra cũng chưa thật sự tối ưu.  Nên rất mong nhận được sự chia sẻ của các bạn.)</p>\n<h3>Code C/C++:</h3>\n<p><div id="gist91918425" class="gist">\n    <div class="gist-file">\n      <div class="gist-data">\n        <div class="js-gist-file-update-container js-task-list-container file-box">\n  <div id="file-test-cpp" class="file">\n    \n\n  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-c ">\n      \n<table class="highlight tab-size js-file-line-container" data-tab-size="8">\n      <tr>\n        <td id="file-test-cpp-L1" class="blob-num js-line-number" data-line-number="1"></td>\n        <td id="file-test-cpp-LC1" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L2" class="blob-num js-line-number" data-line-number="2"></td>\n        <td id="file-test-cpp-LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">std</span><span class="pl-k">;</span></td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L3" class="blob-num js-line-number" data-line-number="3"></td>\n        <td id="file-test-cpp-LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-k">int</span> <span class="pl-en">main</span>()</td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L4" class="blob-num js-line-number" data-line-number="4"></td>\n        <td id="file-test-cpp-LC4" class="blob-code blob-code-inner js-file-line">{</td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L5" class="blob-num js-line-number" data-line-number="5"></td>\n        <td id="file-test-cpp-LC5" class="blob-code blob-code-inner js-file-line">\t<span class="pl-c"><span class="pl-c">//</span>freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);</span></td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L6" class="blob-num js-line-number" data-line-number="6"></td>\n        <td id="file-test-cpp-LC6" class="blob-code blob-code-inner js-file-line">\t<span class="pl-k">int</span> i = -<span class="pl-c1">1</span>;</td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L7" class="blob-num js-line-number" data-line-number="7"></td>\n        <td id="file-test-cpp-LC7" class="blob-code blob-code-inner js-file-line">\t<span class="pl-k">while</span>(<span class="pl-c1">true</span>)</td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L8" class="blob-num js-line-number" data-line-number="8"></td>\n        <td id="file-test-cpp-LC8" class="blob-code blob-code-inner js-file-line">\t{</td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L9" class="blob-num js-line-number" data-line-number="9"></td>\n        <td id="file-test-cpp-LC9" class="blob-code blob-code-inner js-file-line">\t\tcin &gt;&gt; i;</td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L10" class="blob-num js-line-number" data-line-number="10"></td>\n        <td id="file-test-cpp-LC10" class="blob-code blob-code-inner js-file-line">\t\t<span class="pl-k">if</span>(i == <span class="pl-c1">42</span>) <span class="pl-k">break</span>;</td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L11" class="blob-num js-line-number" data-line-number="11"></td>\n        <td id="file-test-cpp-LC11" class="blob-code blob-code-inner js-file-line">\t\tcout &lt;&lt; i &lt;&lt; endl;</td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L12" class="blob-num js-line-number" data-line-number="12"></td>\n        <td id="file-test-cpp-LC12" class="blob-code blob-code-inner js-file-line">\t}</td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L13" class="blob-num js-line-number" data-line-number="13"></td>\n        <td id="file-test-cpp-LC13" class="blob-code blob-code-inner js-file-line">\t<span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>\n      </tr>\n      <tr>\n        <td id="file-test-cpp-L14" class="blob-num js-line-number" data-line-number="14"></td>\n        <td id="file-test-cpp-LC14" class="blob-code blob-code-inner js-file-line">}</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class="gist-meta">\n        <a href="https://gist.github.com/completejavascript/aa31d308498309e125efbbdaeeadb139/raw/fbd2875a8fe7d59932faecc451b7b93f8f89e640/TEST.cpp" style="float:right">view raw</a>\n        <a href="https://gist.github.com/completejavascript/aa31d308498309e125efbbdaeeadb139#file-test-cpp">TEST.cpp</a>\n        hosted with &#10084; by <a href="https://github.com">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<h3>Code Python:</h3>\n<p><div id="gist91918428" class="gist">\n    <div class="gist-file">\n      <div class="gist-data">\n        <div class="js-gist-file-update-container js-task-list-container file-box">\n  <div id="file-test-py" class="file">\n    \n\n  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-python ">\n      \n<table class="highlight tab-size js-file-line-container" data-tab-size="8">\n      <tr>\n        <td id="file-test-py-L1" class="blob-num js-line-number" data-line-number="1"></td>\n        <td id="file-test-py-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">while</span>(<span class="pl-c1">1</span>):</td>\n      </tr>\n      <tr>\n        <td id="file-test-py-L2" class="blob-num js-line-number" data-line-number="2"></td>\n        <td id="file-test-py-LC2" class="blob-code blob-code-inner js-file-line">    x <span class="pl-k">=</span> <span class="pl-c1">input</span>()</td>\n      </tr>\n      <tr>\n        <td id="file-test-py-L3" class="blob-num js-line-number" data-line-number="3"></td>\n        <td id="file-test-py-LC3" class="blob-code blob-code-inner js-file-line">    y <span class="pl-k">=</span> <span class="pl-c1">int</span>(x)</td>\n      </tr>\n      <tr>\n        <td id="file-test-py-L4" class="blob-num js-line-number" data-line-number="4"></td>\n        <td id="file-test-py-LC4" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> y <span class="pl-k">==</span> <span class="pl-c1">42</span>:</td>\n      </tr>\n      <tr>\n        <td id="file-test-py-L5" class="blob-num js-line-number" data-line-number="5"></td>\n        <td id="file-test-py-LC5" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">break</span></td>\n      </tr>\n      <tr>\n        <td id="file-test-py-L6" class="blob-num js-line-number" data-line-number="6"></td>\n        <td id="file-test-py-LC6" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">print</span> y</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class="gist-meta">\n        <a href="https://gist.github.com/completejavascript/f8572704a2911cbc60c88b8f60778a1b/raw/46820707f46572faea17edb9d86ed39bb669a247/TEST.py" style="float:right">view raw</a>\n        <a href="https://gist.github.com/completejavascript/f8572704a2911cbc60c88b8f60778a1b#file-test-py">TEST.py</a>\n        hosted with &#10084; by <a href="https://github.com">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<p><em>Code by Phạm Văn Lâm.</em></p>',id:"f:/Github/the-algorithms-blog/src/posts/2016-10-26---spoj-com-thuat-toan-bai-test-life-the-universe-and-everything/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"SPOJ.COM – Thuật toán bài TEST - Life, the Universe, and Everything",date:"26/10/2016",categories:["spoj","Tham lam - Greedy"],tags:["phạm văn lâm","spoj.com","thuật toán","thuật toán spoj.com","tham lam greedy"]},fields:{slug:"/spoj-com-thuat-toan-bai-test-life-the-universe-and-everything/"},excerpt:"Đề bài: Chương trình của bạn là để sử dụng thuật toán vét cạn brute-force để tìm ra câu trả lời cho  Life, the Universe, and Everything.…",timeToRead:2},prevPost:{frontmatter:{title:"SPOJ.COM – Thuật toán bài SUMPRO - SUM OF PRODUCT"},fields:{slug:"/spoj-com-thuat-toan-bai-sumpro-sum-of-product/"}},nextPost:{frontmatter:{title:"SPOJ.COM – Thuật toán bài TOANDFRO - To and Fro"},fields:{slug:"/spoj-com-thuat-toan-bai-toandfro-to-and-fro/"}},site:{siteMetadata:{title:"Algorithms Blog",siteUrl:"https://thuattoan.phamvanlam.com",twitterHandle:"@CmpltJavaScript",fbCommentId:"728566430818562",fbId:"100013577851883"}}},pathContext:{slug:"/spoj-com-thuat-toan-bai-test-life-the-universe-and-everything/",prevSlug:"/spoj-com-thuat-toan-bai-sumpro-sum-of-product/",nextSlug:"/spoj-com-thuat-toan-bai-toandfro-to-and-fro/"}}}});
//# sourceMappingURL=path---spoj-com-thuat-toan-bai-test-life-the-universe-and-everything-29978379136a405ffbbf.js.map